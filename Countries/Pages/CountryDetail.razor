@page "/countrydetail/{Name}"
@inject IApiConnector<Country.Root> ApiConnector
@inherits Countries.StateManagement.ObservingComponent
@inject CssState CssState
@inject NavigationManager NavigationManager

<div class="main @CssState.DialogCssCLass">
    <div class="btn-back-container">
        <a href="/" class="btn-back">Back</a>
    </div>


    <section class="details">
        @if (Country != null)
        {
            <img class="card-img" src="@Country?.flags?.png" alt="flag from specific country" />

            <div class="details-info">
                <h3 class="details-info-title">@Country?.name?.official</h3>
                <div class="info-section">
                    <div class="info-first-section">
                        <p> Native Name: <span>@Country?.name?.common </span></p>
                        <p>Population:<span>@Country?.population </span></p>
                        <p>Region:<span>@Country?.region </span></p>
                        <p>Sub Region:<span>@Country?.subregion</span></p>
                        <p>Capital:<span>@Country?.capital?[0]</span></p>
                        <p>Top Level Domain: <span>@Country?.tld?[0]</span></p>
                    </div>
                </div>

                <div class="info-third-section">
                    <div class="border">
                        <p class="border-title">
                            Border countries:
                        </p>

                        @if (Country?.borders != null)
                        {
                            <div class="border-container">
                                @if (Countries != null)
                                {
                                    foreach (var country in Countries)
                                    {
                                        <a class="btn-border" @onclick="() => ChangeCountry(country?.name?.common!)">@country?.name?.common</a>
                                    }
                                }
                            </div>
                        }
                        else
                        {
                            <p> No borders</p>
                        }
                    </div>
                </div>
            </div>
        }
    </section>
</div>


@code {

    [Parameter]
    public string? Name { get; set; }

    private Country.Root? Country { get; set; } = new();
    private IList<Country.Root?>? Countries { get; } = new List<Country.Root?>();


    protected override async Task OnInitializedAsync()
    {
        Country = await ApiConnector.GetAsync($"https://restcountries.com/v3.1/name/{Name}");

        if (Country?.borders != null)
        {
            for (int i = 0; i < Country.borders.Count; i++)
            {
                string borderShort = Country.borders[i];
                Countries?.Add(await ApiConnector.GetAsync($"https://restcountries.com/v3.1/alpha/{borderShort}"));
            }
        }

        CssState.Subscribe(this);
    }


    private void ChangeCountry(string name)
    {
        NavigationManager.NavigateTo($"countrydetail/{name}", true);
    }

}
